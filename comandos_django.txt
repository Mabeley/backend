Todos los comando de django se realizan mediante ek comando 'django-admin'
django-admin startproject NOMBRE_PROYECTO > creara un nuevo proyecto con los archivos nesarios para django

para que me muestre todas migraciones>  python manage.py showmigrations



python manage.py startapp "nombre de app" > para crear una aplicacion


python manage.py makemigrations NOMBRE_APP --name NOMBRE_MIGRACION > creara
 una nueva migracion de nuestra aplicacion con todos los cambios que se 
 habran hecho en el ORM

 python manage.py sqlmigrate NOMBRE_APP NUMERO_MIGRACION > mostrara el SQL
  de la migracion creada


  revertir todas las migraciones de la aplicacion> 
  python manage.py showmigrations gestion zero

 NOTA:
python manage.py migrate NOMBRE_APP NUMERO_MIGRACION > efectuar dicha 
migracion o se puede revertir hasta la migracion seleccionada (todas las
 migraciones efectuadas queden sin efecto) si queremos revetir absolutamente
  todas las migraciones podemos colocar en NUMERO_MIGRACION zero  


python manage.py shell>>> proporciona una Interfaz de comandos python pero 
importando todas la liberias de django  


python manage.py flush > resetea toda la base de datos y elimina toda la informacion de todas las tablas, reinicia los indices de los
autoincrementables y la vuelve a un estado inicial


python manage.py test > corre todos los test definidos en los archivos tests.py de cada aplicacion ademas crea una base de
 datos de prueba para los test y adicionalmente se puede colocar -v o --verbosity que servira para indicar el grado de 
 definicion de la ejecucion de los tests siendo 0 el mas corto y 3 el mas explicito, ademas se puede agregar el nombre 
 de la aplicacion para que solo se corra esos tests y mas a detalle poner el nombre del archivo ademas se puede poner 
 la clase hasta colocar el nombre de que unico test se desea correr dentro de la clase


django-admin startproject restaurante .  >para crear la carpeta pero q esta no cree dentro una carpeta con el mismo nombre



No se puede crear aplicaciones con los nombres de las aplicaciones de Django: auth, contenttypes, message, users, admin,
 sessions, staticfiles



 python manage.py createsuperuser > crea un superusuario para que pueda utilizado en el panel administrativo